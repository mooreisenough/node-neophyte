{"version":3,"sources":["../es6/template-literals.js"],"names":[],"mappings":"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","file":"template-literals-babel.js","sourcesContent":["(function() {\n\t'use strict';\n\n\t{ // simple examples\n\t\tlet firstName = 'Ben',\n\t\t\tlastName = `Ilegbodu`;\n\n\t\t// Basic template literal is surrounding by\n\t\t// backticks so single/double quotes do need\n\t\t// to be escaped\n\t\t// output: He said, \"It's your fault!\"\n\t\tconsole.log(`He said, \"It's your fault!\"`);\n\n\t\t// Template literals support interpolation.\n\t\t// The values within `firstName` and `lastName`\n\t\t// are substituted into where the tokens are\n\t\t// output: Name: Ilegbodu, Ben\n\t\tconsole.log(`Name: ${lastName}, ${firstName}`);\n\n\t\t// Template literals support multi-line strings\n\t\t// output: This is\n\t\t// \t\tmulti-line text, so that\n\t\t//\t\tnewline characters are\n\t\t//\n\t\t//\n\t\t//\t\tnot needed. All whitespace\n\t\t//\t\t\tis respected, including tabs.\n\t\t//\n\t\t//\n\t\tconsole.log(`This is\n\t\t\tmulti-line text, so that\n\t\t\tnewline characters are\n\n\n\t\t\tnot needed. All whitespace\n\t\t\t\tis respected, including tabs.\n\n\t\t`);\n\t}\n\n\t{ // template literals are strings\n\t\tlet templateLiteral = `This is a literal`;\n\n\t\t// output: string\n\t\tconsole.log(typeof templateLiteral);\n\n\t\t// output: 17\n\t\tconsole.log(templateLiteral.length);\n\n\t\t// output: is a literal\n\t\tconsole.log(templateLiteral.substr(5));\n\n\t\t// output: a\n\t\tconsole.log(templateLiteral.charAt(8));\n\t}\n\n\t{\t// template literals using expression interpolation\n\t\tlet timeOfDay = (new Date).getHours(),\n\t\t\tmealCost = 7.99,\n\t\t\ttax = 0.09;\n\n\t\t// any sort of expression can go inside the\n\t\t// substitution token\n\t\t// output: Morning/Evening meal: $8.71\n\t\tconsole.log(`${timeOfDay < 12 ? 'Morning' : 'Evening'} meal: $${(mealCost * (1 + tax)).toFixed(2)}`);\n\n\t\tlet replacements = {\n\t\t\t\tfirstName: 'Ben',\n\t\t\t\tlastName: 'Ilegbodu'\n\t\t\t},\n\t\t\t{firstName, lastName} = replacements;\n\n\t\t// you have to destructure an object first in order\n\t\t// to use its key-values as substitution values\n\t\t// output: Name: Ilegbodu, Ben\n\t\tconsole.log(`Name: ${lastName}, ${firstName}`);\n\n\t\t// output: Name: ${lastName}, Ben\n\t\tconsole.log(`Name: \\${lastName}, ${firstName}`);\n\t}\n\n\t{ // multi-line template literals + interpolation\n\t\tlet eventCardInfo = {\n\t\t\t\ttitle: 'Nodevember 2015',\n\t\t\t\turl: 'http://nodevember.org/',\n\t\t\t\ttagline: 'Two days of Node and JavaScript',\n\t\t\t\ttags: ['JavaScript', 'Node']\n\t\t\t},\n\t\t\t{title, url, tagline, tags} = eventCardInfo,\n\t\t\thtml = `<section>\n\t\t\t\t\t\t<h3><a href=\"${url}\">${title}</a></h3>\n\t\t\t\t\t\t<p>${tagline}</p>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\ttags.map(\n\t\t\t\t\t\t\t\t\ttag => `<li>${tag}</li>`\n\t\t\t\t\t\t\t\t).join('\\n')\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</section>`;\n\n\t\t// The HML output isn't properly aligned, but that\n\t\t// doesn't really matter anymore\n\t\tconsole.log(html);\n\t}\n\n\t{ // tagged templates\n\t\tlet rawString = String.raw`\\t\\tThis is not a\\n multi-line string!`;\n\n\t\t// instead of tabs and new lines being in the string,\n\t\t// the actual escape characters are in the string\n\t\t// (effectively the backslash is escaped)\n\t\t// output: \"\\\\t\\\\tThis is not a\\\\n multi-line string!\"\n\t\tconsole.log(rawString);\n\n\t\tlet name = 'Ben',\n\n\t\t\t// no more double escaping and we can use\n\t\t\t// interpolation!\n\t\t\tnameRegExp = RegExp(String.raw`\\(${name}\\)`);\n\n\t\tconsole.log(nameRegExp.test('(Ben) Ilegbodu'));\n\n\t\tlet firstName = 'Ben',\n\t\t\tlastName = `Ilegbodu`,\n\t\t\tinterpolate = function(literals, ...substitutions) {\n\t\t\t\t// literals = ['Name: ', ', ', '']\n\t\t\t\t// substitutions = ['Ilegbodu', 'Ben']\n\t\t\t\t// substitutions.length == literals.length - 1\n\n\t\t\t    let interpolation = '';\n\n\t\t\t    // loop through based on length of substitutions\n\t\t\t    // since its shorter by 1\n\t\t\t    for (let i = 0; i < substitutions.length; i++) {\n\t\t\t        interpolation += literals[i] + substitutions[i];\n\t\t\t    }\n\n\t\t\t    // add the extra literal to the end\n\t\t\t    interpolation += literals[literals.length - 1];\n\n\t\t\t    return interpolation;\n\t\t\t};\n\n\t\t// instead of using the default interpolation\n\t\t// that ES6 offers, we're reimplementing it using\n\t\t// `interpolate` function\n\t\t// output: Name: Ilegbodu, Ben\n\t\tconsole.log(interpolate`Name: ${lastName}, ${firstName}`);\n\n\t\tlet\n\t\t\tStringraw = function(literals, ...substitutions) {\n\t\t\t\t// literals.raw is an array of raw strings\n\t\t\t    let rawLiterals = literals.raw,\n\t\t\t    \tinterpolation = '';\n\n\t\t\t    // loop through based on length of substitutions\n\t\t\t    // since its shorter by 1\n\t\t\t    for (let i = 0; i < substitutions.length; i++) {\n\t\t\t        interpolation += rawLiterals[i] + substitutions[i];\n\t\t\t    }\n\n\t\t\t    // add the extra raw literal to the end\n\t\t\t    interpolation += rawLiterals[rawLiterals.length - 1];\n\n\t\t\t    return interpolation;\n\n\t\t\t};\n\n\t\tconsole.log(Stringraw`\\t\\tThis ${1} is not a\\n multi-line string!`);\n\t}\n}) ();\n"]}