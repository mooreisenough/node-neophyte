{"version":3,"sources":["../es6/promises.js"],"names":[],"mappings":"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","file":"/Users/benmvp/github/benmvp/learning-es6/examples/transpiled-es5/promises-traceur.js","sourcesContent":["(function() {\n\t'use strict';\n\n\t// Creating a promise wrapper for setTimeout\n\tfunction wait(delay) {\n\t    return new Promise((resolve, reject) => {\n\t        setTimeout(resolve, delay);\n\t    });\n\t}\n\n\t// Create a promise wrapper for XHR request\n\tfunction fetch(url) {\n\t\t// return a Promise object\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\trequest.open('GET', url);\n\n\t\t\trequest.onload = function() {\n\t\t\t\tif (req.status == 200) {\n\t\t\t\t\t// fulfill the promise\n\t\t\t\t\tresolve(request.responseText);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// reject the promise\n\t\t\t\t\treject(new Error('request failed!'));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.send();\n\t\t});\n\t}\n\n\t// Return a promise that is only fulfilled once\n\t// all of the url fetch requests are fulfilled\n\t// via Promise.all\n\tfunction fetchAll(...urls) {\n\t\t// Use rest parameter to aggregate URLs\n\t\t// into an array\n\n\t\treturn Promise.all(\n\t\t\t// map the array of urls into an array\n\t\t\t// of `fetch` promises\n\t\t\turls.map(fetch)\n\t\t);\n\t}\n\n\t// Extend the promise-based `wait` by throwing\n\t// an Error if the delay is successful\n\tfunction timeout(delay) {\n\t\treturn wait(delay).then(() => {\n\t\t\tthrow new Error('Timed out!');\n\t\t});\n\t}\n\n\t// Return a promise that will be fulfilled if\n\t// the fetch is fulfilled before the timeout\n\t// is rejected.\n\tfunction fetchWithTimeout(url, delay) {\n\t\t// construct an array to pass to `Promise.race`\n\t\treturn Promise.race([\n\t\t\tfetch(url),\n\t\t\ttimeout(delay)\n\t\t]);\n\t}\n\n\t// Using a promise\n\twait(3000).then(() => {\n\t    console.log('3 seconds have passed!');\n\t    return wait(2000);\n\t}).then(() => {\n\t\tconsole.log('5 seconds have passed!');\n\t\tx++; // ReferenceError triggers `catch`\n\t}).catch(error => {\n\t\t// output: ReferenceError\n\t\tconsole.log(error);\n\t}).then(() => {\n\t\t// simulate `finally` clause\n\t\tconsole.log('clean up');\n\t});\n\n\tfetch('/json/action-movies.json').then(response => {\n\t\tvar data = JSON.parse(response);\n\n\t\tconsole.log('main data', data);\n\n\t\treturn fetch(data.url);\n\t}).then(response => {\n\t\tconsole.log('inner data', response);\n\t}).catch(e => {\n\t\t// catching all failures!\n\t\tconsole.error(e);\n\t});\n\n\t// Promise.resolve() creates a promise\n\t// that is \"immediately\" settled & fulfilled.\n\t// You can optionally pass a value.\n\tPromise.resolve('sin').then(problem => {\n\t\t// output: sin\n\t\tconsole.log(problem);\n\t});\n\n\t// Even though the promise is \"immediately\"\n\t// fulfilled, all promises are required to\n\t// be asynchronous. Therefore the fulfillment\n\t// reaction is added to the execution queue\n\t// and the following line executes first.\n\tconsole.log('this executes before the fulfillment');\n\n\t// Promise.reject() creates a promise that\n\t// is \"immediately\" settled & rejected. You\n\t// should pass an `Error` object.\n\tPromise.reject(new Error('Pride!')).catch(e => {\n\t\tconsole.error(e);\n\t});\n\n\t// Similarly, because promises *must* be\n\t// asynchronous, this line will execute first\n\tconsole.log('this executes before the rejection');\n\n\tvar fetchPromise = fetch('/json/scary-movies.json');\n\n\t// Fulfilling or rejecting an already existing \n\t// promise does nothing. It's just returned\n\t// output: true\n\tconsole.log(Promise.resolve(fetchPromise) == fetchPromise);\n\tconsole.log(Promise.reject(fetchPromise) == fetchPromise);\n\n\t// Resolving a `thenable` returns a `Promise`\n\t// on which you can add `then()` or `catch()`\n\t// reactions\n\tPromise.resolve({\n\t\t// A `thenable` is an object that\n\t\t// has a Promise-style `then` method.\n\t\t// Using method definition shorthand!\n\t\tthen(resolve, reject) {\n\t\t\tresolve('Ben');\n\t\t}\n\t}).then(name => {\n\t\t// using property value shorthand!\n\t\t// ouput: {name: 'Ben'}\n\t\tconsole.log({name});\n\t});\n\n\t// Create a native Promise wrapper of the\n\t// jQuery.get() method that returns a jQuery-style\n\t// promise which is a `thenable`\n\tvar $fetch = function(url) {\n\t\treturn Promise.resolve($.get(url));\n\t};\n\n\t$fetch('/json/romantic-movies.json').then(response => {\n\t\tconsole.log('response', response);\n\t});\n\n\t// Create immediately fulfilled promise\n\t// that returns 'Ben'\n\tPromise.resolve('Ben').then(firstName => {\n\t\t// output: Ben\n\t\tconsole.log(firstName);\n\n\t\treturn firstName + ' A.';\n\t}).then(firstAndMiddle => {\n\t\t// output: Ben A.\n\t\tconsole.log(firstAndMiddle);\n\n\t\treturn firstAndMiddle + ' Ilegbodu';\n\t}).then(fullName => {\n\t\t// output: Ben A. Ilegbodu\n\t\tconsole.log(fullName);\n\t});\n\n\t// Create immediately fulfilled, but\n\t// empty promise\n\tPromise.resolve().then(() => {\n\t\t// throw an `Error` which should be\n\t\t// caught by `catch()`\n\t\tthrow new Error('oh no!');\n\t}).catch(e => {\n\t\t// ouput: 'oh no!' error with call\n\t\t// stack info\n\t\tconsole.error(e);\n\n\t\t// throw another `Error` within this\n\t\t// error handler, which can be caught\n\t\t// by a follow-up error handler\n\t\tthrow new Error('again?!?!');\n\t}).catch(e => {\n\t\t// output: 'again?!?!' error\n\t\tconsole.error(e);\n\t});\n\n\tfetch('/json/bad-data.json').catch(() => {\n\t\t// There was an error retrieving data\n\t\t// so just return default data\n\t\treturn JSON.stringify({name: 'Ben Ilegbodu'});\n\t}).then(response => {\n\t\t// at this point we should always have\n\t\t// valid data regardless of if the `fetch`\n\t\t// was successful\n\t\t// output: {name: 'Ben Ilegbodu'}\n\t\tconsole.log(response);\n\t});\n\n\t// Create immediately erjected and empty\n\t// promise\n\tPromise.reject(new Error('FAIL!')).then(() => {\n\t\t// because the promise is rejected,\n\t\t// this fulfillment reaction is never called\n\t}).then(() => {\n\t\t// neither is this one\n\t}).catch(e => {\n\t\t// instead this reject reaction is called\n\t\t// to handle the rejection that happened further\n\t\t// up the chain\n\t\t// output: 'FAIL!' error\n\t\tconsole.error(e);\n\t});\n\n\t// Make an XHR request for each URL and\n\t// process the results once they've *all*\n\t// completed\n\tfetchAll(\n\t\t'/json/funny-movies.json',\n\t\t'/json/action-movies.json',\n\t\t'/json/scary-movies.json',\n\t\t'/json/romantic-movies.json',\n\t\t'/json/sad-movies.json'\n\t).then(responses => {\n\t\t// `responses` is the array of response\n\t\t// data\n\n\t\t// output: 5\n\t\tconsole.log(responses.length);\n\n\t\t// more processing of results\n\t}).catch(e => {\n\t\t// one or of the requests failed or\n\t\t// there was an error in `then()`\n\t\tconsole.error('one or more of the requests failed!', e);\n\t});\n\n\t// Make an XHR request for the URL that has to\n\t// return a response *before* the 5 ms timeout\n\t// happens\n\tfetchWithTimeout('/json/sad-movies.json', 5).then(response => {\n\t\t// successful response before the 5 ms timeout\n\t\tconsole.log('successful response', response)\n\t}).catch(e => {\n\t\t// Either the timeout occurred or some other error.\n\t\t// Would need to check the method or use a custom\n\t\t// `Error` subclass in `timeout`\n\t\tconsole.error('request error', e);\n\t});\n}) ();\n"]}