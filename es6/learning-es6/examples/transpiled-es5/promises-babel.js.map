{"version":3,"sources":["../es6/promises.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AACX,aAAY,CAAC;;;AAGb,UAAS,IAAI,CAAC,KAAK,EAAE;AACjB,SAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACpC,aAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;GAC9B,CAAC,CAAC;EACN;;;AAGD,UAAS,KAAK,CAAC,GAAG,EAAE;;AAEnB,SAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM,EAAK;AACvC,OAAI,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;;AAEnC,UAAO,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC;;AAEzB,UAAO,CAAC,MAAM,GAAG,YAAW;AAC3B,QAAI,GAAG,CAAC,MAAM,IAAI,GAAG,EAAE;;AAEtB,YAAO,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;KAC9B,MACI;;AAEJ,WAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;KACrC;IACD,CAAC;;AAEF,UAAO,CAAC,IAAI,EAAE,CAAC;GACf,CAAC,CAAC;EACH;;;;;AAKD,UAAS,QAAQ,GAAU;oCAAN,IAAI;AAAJ,OAAI;;;;;;AAIxB,SAAO,OAAO,CAAC,GAAG;;;AAGjB,MAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CACf,CAAC;EACF;;;;AAID,UAAS,OAAO,CAAC,KAAK,EAAE;AACvB,SAAO,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,YAAM;AAC7B,SAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;GAC9B,CAAC,CAAC;EACH;;;;;AAKD,UAAS,gBAAgB,CAAC,GAAG,EAAE,KAAK,EAAE;;AAErC,SAAO,OAAO,CAAC,IAAI,CAAC,CACnB,KAAK,CAAC,GAAG,CAAC,EACV,OAAO,CAAC,KAAK,CAAC,CACd,CAAC,CAAC;EACH;;;AAGD,KAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAM;AAClB,SAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;AACtC,SAAO,IAAI,CAAC,IAAI,CAAC,CAAC;EACrB,CAAC,CAAC,IAAI,CAAC,YAAM;AACb,SAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;AACtC,GAAC,EAAE,CAAC;EACJ,CAAC,SAAM,CAAC,UAAA,KAAK,EAAI;;AAEjB,SAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;EACnB,CAAC,CAAC,IAAI,CAAC,YAAM;;AAEb,SAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;EACxB,CAAC,CAAC;;AAEH,MAAK,CAAC,0BAA0B,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ,EAAI;AAClD,MAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;;AAEhC,SAAO,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;;AAE/B,SAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;EACvB,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ,EAAI;AACnB,SAAO,CAAC,GAAG,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;EACpC,CAAC,SAAM,CAAC,UAAA,CAAC,EAAI;;AAEb,SAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC;;;;;AAKH,QAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO,EAAI;;AAEtC,SAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;EACrB,CAAC,CAAC;;;;;;;AAOH,QAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;;;;;AAKpD,QAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC,SAAM,CAAC,UAAA,CAAC,EAAI;AAC9C,SAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC;;;;AAIH,QAAO,CAAC,GAAG,CAAC,oCAAoC,CAAC,CAAC;;AAElD,KAAI,YAAY,GAAG,KAAK,CAAC,yBAAyB,CAAC,CAAC;;;;;AAKpD,QAAO,CAAC,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,YAAY,CAAC,CAAC;AAC3D,QAAO,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,YAAY,CAAC,CAAC;;;;;AAK1D,QAAO,CAAC,OAAO,CAAC;;;;AAIf,MAAI,EAAA,cAAC,OAAO,EAAE,MAAM,EAAE;AACrB,UAAO,CAAC,KAAK,CAAC,CAAC;GACf;EACD,CAAC,CAAC,IAAI,CAAC,UAAA,IAAI,EAAI;;;AAGf,SAAO,CAAC,GAAG,CAAC,EAAC,IAAI,EAAJ,IAAI,EAAC,CAAC,CAAC;EACpB,CAAC,CAAC;;;;;AAKH,KAAI,MAAM,GAAG,SAAT,MAAM,CAAY,GAAG,EAAE;AAC1B,SAAO,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;EACnC,CAAC;;AAEF,OAAM,CAAC,4BAA4B,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ,EAAI;AACrD,SAAO,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;EAClC,CAAC,CAAC;;;;AAIH,QAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,UAAA,SAAS,EAAI;;AAExC,SAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;;AAEvB,SAAO,SAAS,GAAG,KAAK,CAAC;EACzB,CAAC,CAAC,IAAI,CAAC,UAAA,cAAc,EAAI;;AAEzB,SAAO,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;;AAE5B,SAAO,cAAc,GAAG,WAAW,CAAC;EACpC,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ,EAAI;;AAEnB,SAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;EACtB,CAAC,CAAC;;;;AAIH,QAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,YAAM;;;AAG5B,QAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,CAAC;EAC1B,CAAC,SAAM,CAAC,UAAA,CAAC,EAAI;;;AAGb,SAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;;;AAKjB,QAAM,IAAI,KAAK,CAAC,WAAW,CAAC,CAAC;EAC7B,CAAC,SAAM,CAAC,UAAA,CAAC,EAAI;;AAEb,SAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC;;AAEH,MAAK,CAAC,qBAAqB,CAAC,SAAM,CAAC,YAAM;;;AAGxC,SAAO,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,EAAE,cAAc,EAAC,CAAC,CAAC;EAC9C,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ,EAAI;;;;;AAKnB,SAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;EACtB,CAAC,CAAC;;;;AAIH,QAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,YAAM;;;EAG7C,CAAC,CAAC,IAAI,CAAC,YAAM;;EAEb,CAAC,SAAM,CAAC,UAAA,CAAC,EAAI;;;;;AAKb,SAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;EACjB,CAAC,CAAC;;;;;AAKH,SAAQ,CACP,yBAAyB,EACzB,0BAA0B,EAC1B,yBAAyB,EACzB,4BAA4B,EAC5B,uBAAuB,CACvB,CAAC,IAAI,CAAC,UAAA,SAAS,EAAI;;;;;AAKnB,SAAO,CAAC,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;;;EAG9B,CAAC,SAAM,CAAC,UAAA,CAAC,EAAI;;;AAGb,SAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,CAAC,CAAC,CAAC;EACxD,CAAC,CAAC;;;;;AAKH,iBAAgB,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAA,QAAQ,EAAI;;AAE7D,SAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAA;EAC5C,CAAC,SAAM,CAAC,UAAA,CAAC,EAAI;;;;AAIb,SAAO,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;EAClC,CAAC,CAAC;CACH,CAAA,EAAI,CAAC","file":"promises-babel.js","sourcesContent":["(function() {\n\t'use strict';\n\n\t// Creating a promise wrapper for setTimeout\n\tfunction wait(delay) {\n\t    return new Promise((resolve, reject) => {\n\t        setTimeout(resolve, delay);\n\t    });\n\t}\n\n\t// Create a promise wrapper for XHR request\n\tfunction fetch(url) {\n\t\t// return a Promise object\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\trequest.open('GET', url);\n\n\t\t\trequest.onload = function() {\n\t\t\t\tif (req.status == 200) {\n\t\t\t\t\t// fulfill the promise\n\t\t\t\t\tresolve(request.responseText);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// reject the promise\n\t\t\t\t\treject(new Error('request failed!'));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\trequest.send();\n\t\t});\n\t}\n\n\t// Return a promise that is only fulfilled once\n\t// all of the url fetch requests are fulfilled\n\t// via Promise.all\n\tfunction fetchAll(...urls) {\n\t\t// Use rest parameter to aggregate URLs\n\t\t// into an array\n\n\t\treturn Promise.all(\n\t\t\t// map the array of urls into an array\n\t\t\t// of `fetch` promises\n\t\t\turls.map(fetch)\n\t\t);\n\t}\n\n\t// Extend the promise-based `wait` by throwing\n\t// an Error if the delay is successful\n\tfunction timeout(delay) {\n\t\treturn wait(delay).then(() => {\n\t\t\tthrow new Error('Timed out!');\n\t\t});\n\t}\n\n\t// Return a promise that will be fulfilled if\n\t// the fetch is fulfilled before the timeout\n\t// is rejected.\n\tfunction fetchWithTimeout(url, delay) {\n\t\t// construct an array to pass to `Promise.race`\n\t\treturn Promise.race([\n\t\t\tfetch(url),\n\t\t\ttimeout(delay)\n\t\t]);\n\t}\n\n\t// Using a promise\n\twait(3000).then(() => {\n\t    console.log('3 seconds have passed!');\n\t    return wait(2000);\n\t}).then(() => {\n\t\tconsole.log('5 seconds have passed!');\n\t\tx++; // ReferenceError triggers `catch`\n\t}).catch(error => {\n\t\t// output: ReferenceError\n\t\tconsole.log(error);\n\t}).then(() => {\n\t\t// simulate `finally` clause\n\t\tconsole.log('clean up');\n\t});\n\n\tfetch('/json/action-movies.json').then(response => {\n\t\tvar data = JSON.parse(response);\n\n\t\tconsole.log('main data', data);\n\n\t\treturn fetch(data.url);\n\t}).then(response => {\n\t\tconsole.log('inner data', response);\n\t}).catch(e => {\n\t\t// catching all failures!\n\t\tconsole.error(e);\n\t});\n\n\t// Promise.resolve() creates a promise\n\t// that is \"immediately\" settled & fulfilled.\n\t// You can optionally pass a value.\n\tPromise.resolve('sin').then(problem => {\n\t\t// output: sin\n\t\tconsole.log(problem);\n\t});\n\n\t// Even though the promise is \"immediately\"\n\t// fulfilled, all promises are required to\n\t// be asynchronous. Therefore the fulfillment\n\t// reaction is added to the execution queue\n\t// and the following line executes first.\n\tconsole.log('this executes before the fulfillment');\n\n\t// Promise.reject() creates a promise that\n\t// is \"immediately\" settled & rejected. You\n\t// should pass an `Error` object.\n\tPromise.reject(new Error('Pride!')).catch(e => {\n\t\tconsole.error(e);\n\t});\n\n\t// Similarly, because promises *must* be\n\t// asynchronous, this line will execute first\n\tconsole.log('this executes before the rejection');\n\n\tvar fetchPromise = fetch('/json/scary-movies.json');\n\n\t// Fulfilling or rejecting an already existing \n\t// promise does nothing. It's just returned\n\t// output: true\n\tconsole.log(Promise.resolve(fetchPromise) == fetchPromise);\n\tconsole.log(Promise.reject(fetchPromise) == fetchPromise);\n\n\t// Resolving a `thenable` returns a `Promise`\n\t// on which you can add `then()` or `catch()`\n\t// reactions\n\tPromise.resolve({\n\t\t// A `thenable` is an object that\n\t\t// has a Promise-style `then` method.\n\t\t// Using method definition shorthand!\n\t\tthen(resolve, reject) {\n\t\t\tresolve('Ben');\n\t\t}\n\t}).then(name => {\n\t\t// using property value shorthand!\n\t\t// ouput: {name: 'Ben'}\n\t\tconsole.log({name});\n\t});\n\n\t// Create a native Promise wrapper of the\n\t// jQuery.get() method that returns a jQuery-style\n\t// promise which is a `thenable`\n\tvar $fetch = function(url) {\n\t\treturn Promise.resolve($.get(url));\n\t};\n\n\t$fetch('/json/romantic-movies.json').then(response => {\n\t\tconsole.log('response', response);\n\t});\n\n\t// Create immediately fulfilled promise\n\t// that returns 'Ben'\n\tPromise.resolve('Ben').then(firstName => {\n\t\t// output: Ben\n\t\tconsole.log(firstName);\n\n\t\treturn firstName + ' A.';\n\t}).then(firstAndMiddle => {\n\t\t// output: Ben A.\n\t\tconsole.log(firstAndMiddle);\n\n\t\treturn firstAndMiddle + ' Ilegbodu';\n\t}).then(fullName => {\n\t\t// output: Ben A. Ilegbodu\n\t\tconsole.log(fullName);\n\t});\n\n\t// Create immediately fulfilled, but\n\t// empty promise\n\tPromise.resolve().then(() => {\n\t\t// throw an `Error` which should be\n\t\t// caught by `catch()`\n\t\tthrow new Error('oh no!');\n\t}).catch(e => {\n\t\t// ouput: 'oh no!' error with call\n\t\t// stack info\n\t\tconsole.error(e);\n\n\t\t// throw another `Error` within this\n\t\t// error handler, which can be caught\n\t\t// by a follow-up error handler\n\t\tthrow new Error('again?!?!');\n\t}).catch(e => {\n\t\t// output: 'again?!?!' error\n\t\tconsole.error(e);\n\t});\n\n\tfetch('/json/bad-data.json').catch(() => {\n\t\t// There was an error retrieving data\n\t\t// so just return default data\n\t\treturn JSON.stringify({name: 'Ben Ilegbodu'});\n\t}).then(response => {\n\t\t// at this point we should always have\n\t\t// valid data regardless of if the `fetch`\n\t\t// was successful\n\t\t// output: {name: 'Ben Ilegbodu'}\n\t\tconsole.log(response);\n\t});\n\n\t// Create immediately erjected and empty\n\t// promise\n\tPromise.reject(new Error('FAIL!')).then(() => {\n\t\t// because the promise is rejected,\n\t\t// this fulfillment reaction is never called\n\t}).then(() => {\n\t\t// neither is this one\n\t}).catch(e => {\n\t\t// instead this reject reaction is called\n\t\t// to handle the rejection that happened further\n\t\t// up the chain\n\t\t// output: 'FAIL!' error\n\t\tconsole.error(e);\n\t});\n\n\t// Make an XHR request for each URL and\n\t// process the results once they've *all*\n\t// completed\n\tfetchAll(\n\t\t'/json/funny-movies.json',\n\t\t'/json/action-movies.json',\n\t\t'/json/scary-movies.json',\n\t\t'/json/romantic-movies.json',\n\t\t'/json/sad-movies.json'\n\t).then(responses => {\n\t\t// `responses` is the array of response\n\t\t// data\n\n\t\t// output: 5\n\t\tconsole.log(responses.length);\n\n\t\t// more processing of results\n\t}).catch(e => {\n\t\t// one or of the requests failed or\n\t\t// there was an error in `then()`\n\t\tconsole.error('one or more of the requests failed!', e);\n\t});\n\n\t// Make an XHR request for the URL that has to\n\t// return a response *before* the 5 ms timeout\n\t// happens\n\tfetchWithTimeout('/json/sad-movies.json', 5).then(response => {\n\t\t// successful response before the 5 ms timeout\n\t\tconsole.log('successful response', response)\n\t}).catch(e => {\n\t\t// Either the timeout occurred or some other error.\n\t\t// Would need to check the method or use a custom\n\t\t// `Error` subclass in `timeout`\n\t\tconsole.error('request error', e);\n\t});\n}) ();\n"]}