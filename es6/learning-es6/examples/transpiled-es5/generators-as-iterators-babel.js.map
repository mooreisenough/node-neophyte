{"version":3,"sources":["../es6/generators.js"],"names":[],"mappings":"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","file":"generators-babel.js","sourcesContent":["(function() {\n\t'use strict';\n\n\tfunction* range(start, count) {\n\t    for (let delta = 0; delta < count; delta++) {\n\t        yield start + delta;\n\t    }\n\t}\n\n\tfunction* basicGeneratorFunc() {\n\t    console.log('before yield');\n\t    yield;\n\t    console.log('after yield');\n\t}\n\n\tfunction* awesomeGeneratorFunc() {\n\t\tconsole.log('start');\n\n\t\tconsole.log('first yield');\n\t\tyield 'Generators';\n\n\t\tconsole.log('second yield');\n\t\tyield 'are';\n\n\t\tconsole.log('third yield');\n\t\tyield 'awesome!';\n\n\t\tconsole.log('all done!');\n\n\t\treturn 1000;\n\t}\n\n\tfunction* delegatedGeneratorFunc(start) {\n\t    // yield the first item in the generator\n\t    yield 'before';\n\n\t    // delegate yielding to `awesomeGeneratorFunc()` which will add\n\t    // 3 more items\n\t    yield* awesomeGeneratorFunc();\n\n\t    // yield 7th item\n\t    yield 'between';\n\n\t    // delegate yielding to `range()` which will add 5 items\n\t    // we can pass parameters/variables just like regular functions\n\t    // without `yield*` we'd just get back a new range generator\n\t    // with only `yield`, the generator would be added as 10th item\n\t    yield* range(start, 5);\n\n\t    // yield 11th and final item\n\t    yield 'after';\n\t}\n\n\tfunction* iterableGeneratorFunc() {\n\t\tyield 'adios';\n\t\tyield* 'hello'; // a string is an iterable!\n\t\tyield 'au revoir';\n\t}\n\n\tfunction* delegatedGeneratorFuncV2() {\n\t\t// we're still including the 3 items yielded by awesomeGeneratorFunc(),\n\t\t// but we're also saving the return value in a variable\n\t\tlet start = yield* awesomeGeneratorFunc();\n\n\t\t// we can now use that variable to initialize range()\n\t\tyield* range(start, 3);\n\t}\n\n\tfor (let teenageYear of range(13, 7)) {\n\t    console.log(`Teenage angst @ ${teenageYear}!`);\n\t}\n\n\tlet basicGenerator = basicGeneratorFunc();\n\n\t// nothing has happened yet, just have a generator\n\n\t// output:\n\t// before yield\n\t// {value: undefined, done: false}\n\tconsole.log(basicGenerator.next());\n\n\t// this will be executed before 'after yield'\n\t// is written to the log\n\tconsole.log('after first next');\n\n\t// Output:\n\t// after yield\n\t// {value: undefined, done: true}\n\tconsole.log(basicGenerator.next());\n\n\t// additional calls to .next() do nothing\n\n\t// Output:\n\t// {value: undefined, done: false}\n\tconsole.log(basicGenerator.next());\n\n\tconsole.log('===== MANUAL CONSUMPTION =====');\n\tlet awesomeGeneratorObj = awesomeGeneratorFunc();\n\n\t// output:\n\t// start\n\t// first yield\n\t// {value: 'Generators', done: false}\n\tconsole.log(awesomeGeneratorObj.next());\n\n\t// output:\n\t// second yield\n\t// {value: 'are', done: false}\n\tconsole.log(awesomeGeneratorObj.next());\n\n\t// output:\n\t// third yield\n\t// {value: 'awesome!', done: false}\n\tconsole.log(awesomeGeneratorObj.next());\n\n\t// output:\n\t// all done!\n\t// {value: 1000, done: true}\n\tconsole.log(awesomeGeneratorObj.next());\n\n\t// output:\n\t// {value: undefined, done: true}\n\tconsole.log(awesomeGeneratorObj.next());\n\n\t// output:\n\t// {value: undefined, done: true}\n\tconsole.log(awesomeGeneratorObj.next());\n\n\tconsole.log('===== FOR-OF CONSUMPTION =====');\n\n\t// output:\n\t// start\n\t// first yield\n\t// Generators\n\t// second yield\n\t// are\n\t// third yield\n\t// awesome!\n\t// all done!\n\tfor (let word of awesomeGeneratorFunc()) {\n\t\tconsole.log(`value: \"${word}\"`);\n\t}\n\n\tconsole.log('===== DESTRUCTURING CONSUMPTION =====');\n\n\t// output:\n\t// start\n\t// first yield\n\t// second yield\n\tlet [firstValue, secondValue] = awesomeGeneratorFunc();\n\n\t// output: 'Generators'\n\tconsole.log(firstValue);\n\n\t// output: 'are'\n\tconsole.log(secondValue);\n\n\tconsole.log('===== SPREAD OPERATOR CONSUMPTION =====');\n\n\tlet generatedArray = [...awesomeGeneratorFunc()];\n\n\t// output:\n\t// start\n\t// first yield\n\t// second yield\n\t// third yield\n\t// all done!\n\t// ['Generators', 'are', 'awesome!']\n\tconsole.log(generatedArray);\n\n\t// quickly see contents of generator by converting to an array\n\t// output:\n\t// ['before', 1, 2, 3, 4, 5, 'between', 'Generators', 'area', 'awesome', 'after']\n\tconsole.log([...delegatedGeneratorFunc(1)]);\n\n\t// quickly see contents of generator by converting to an array\n\t// output: ['adios', 'H', 'e', 'l', 'l', 'o', 'au revoir']\n\tconsole.log([...iterableGeneratorFunc()]);\n\n\t// output: ['Generators', 'are', 'awesome', 1000, 1001, 1002]\n\tconsole.log([...delegatedGeneratorFuncV2()]);\n\n\tclass BinaryTree {\n\t\tconstructor(value, left, right) {\n\t\t\tthis.value = value;\n\t\t\tthis.left = left;\n\t\t\tthis.right = right;\n\t\t}\n\t\t// default `@@iterator` is a generator function so\n\t    // it needs the `*`\n\t\t*[Symbol.iterator]() {\n\t\t\tif (this.left) {\n\t\t\t\tyield* this.left;\n\t\t\t}\n\n\t\t\t// Let's do infix/in-order iteration\n\t\t\tyield this.value;\n\n\t\t\tif (this.right) {\n\t\t\t\tyield* this.right;\n\t\t\t}\n\t\t}\n\t}\n\n\tlet tree = new BinaryTree(4,\n\t\tnew BinaryTree(2,\n\t\t\tnew BinaryTree(1),\n\t\t\tnew BinaryTree(3)),\n\t\tnew BinaryTree(5));\n\n\t// output: [1, 2, 3, 4, 5]\n\tconsole.log([...tree]);\n\n\t// Enumerable class that wraps an iterator exposing methods\n\t// to lazily transform the items\n\tclass Enumerable {\n\t    constructor(iterator) {\n\t        this._iterator = iterator;\n\t    }\n\n\t    *[Symbol.iterator]() {\n\t        yield* this._iterator;\n\t    }\n\n\t    // Static (and private) helper generator functions\n\t    static *_filter(iterator, predicate) {\n\t        for (let value of iterator) {\n\t            if (predicate(value)) {\n\t                yield value;\n\t            }\n\t        }\n\t    }\n\t    static *_map(iterator, mapperFunc) {\n\t        for (let value of iterator) {\n\t            yield mapperFunc(value);\n\t        }\n\t    }\n\t    static *_take(iterator, count) {\n\t        let index = -1;\n\t        for (let value of iterator) {\n\t            if (++index >= count) {\n\t                break;\n\t            }\n\n\t            yield value;\n\t        }\n\t    }\n\n\t    // Instance methods wrapping functional helpers which allow for chaining\n\t    // They essentially act as iterator transformers\n\t    filter(predicate) {\n\t        this._iterator = Enumerable._filter(this._iterator, predicate);\n\t        return this;\n\t    }\n\t    map(mapper) {\n\t        this._iterator = Enumerable._map(this._iterator, mapper);\n\t        return this;\n\t    }\n\t    take(count) {\n\t        this._iterator = Enumerable._take(this._iterator, count);\n\t        return this;\n\t    }\n\t}\n\n\tfunction generateStocks() {\n\t    // Returns an infinite generator that keeps on returning new stocks\n\t    function* _generate() {\n\t        for (let stockNo = 1; ; stockNo++) {\n\t            let stockInfo = {\n\t                name: `Stock #${stockNo}`,\n\t                price: +(Math.random() * 100).toFixed(2)\n\t            };\n\n\t            console.log('Generated stock info', stockInfo);\n\n\t            yield stockInfo;\n\t        }\n\t    }\n\n\t    return new Enumerable(_generate());\n\t}\n\n\tlet enumerable = generateStocks()\n\t    .filter(stockInfo => stockInfo.price > 30)\n\t    .map(stockInfo => `${stockInfo.name} ($${stockInfo.price})`)\n\t    .take(5);\n\n\t// Even though `_generate()` is an infinite generator, it's also lazy so\n\t// we only look at enough stocks that are > 30 until we get 5 of them\n\tconsole.log([...enumerable]);\n}) ();\n"]}