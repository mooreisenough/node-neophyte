{"version":3,"sources":["../es6/iterators-iterables.js"],"names":[],"mappings":"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","file":"iterators-iterables-babel.js","sourcesContent":["(function() {\n\t'use strict';\n\n\tfunction isIterable(obj) {\n\t\treturn obj && typeof obj[Symbol.iterator] === 'function';\n\t}\n\n\tfunction take(iterable, count) {\n\t    // get default `@@iterator` from original iterable\n\t    let iterator = iterable[Symbol.iterator]();\n\n\t    // return new (anonymous) iterable\n\t    return {\n\t        next() {\n\t            // implementing `next()` makes it an iterator\n\n\t            if (count > 0) {\n\t                // if there are items remaining, return the next\n\t                // one from the iterable\n\t                count--;\n\n\n\t\t\t\t\t// return the value from original iterable's iterator.\n\t\t\t\t\t// if there are less values in it than `count`, this\n\t\t\t\t\t// will just return `{done: true}` early!\n\t                return iterator.next();\n\t            }\n\t            else {\n\t                // otherwise just say we're done\n\t                return {done: true};\n\t            }\n\t        },\n\t        [Symbol.iterator]() {\n\t            // implementing default `@@iterator` makes it an iterable\n\t            return this;\n\t        }\n\t    };\n\t}\n\n\tlet values = ['alpha', 'beta', 'charlie'];\n\tlet defaultIterator = values[Symbol.iterator]();\n\n\t// output: {value: 'alpha', done: false}\n\tconsole.log(defaultIterator.next());\n\n\t// output: {value: 'beta', done: false}\n\tconsole.log(defaultIterator.next());\n\n\t// output: {value: 'charlie', done: false}\n\tconsole.log(defaultIterator.next());\n\n\t// output: {value: undefined, done: true}\n\tconsole.log(defaultIterator.next());\n\n\t// output: true\n\tconsole.log(isIterable(values));\n\n\t// output: true\n\tconsole.log(isIterable('Ben'));\n\n\t// output: true\n\tconsole.log(isIterable(new Set()));\n\n\tclass MyIterator {\n\t    constructor() {\n\t        this.step = 0;\n\t    }\n\t    [Symbol.iterator]() {\n\t        return this;\n\t    }\n\t    next() {\n\t        this.step++;\n\n\t        if (this.step === 1)\n\t            return {value: 'Ben'};\n\t        else if (this.step == 2)\n\t            return {value: 'Ilegbodu'};\n\n\t        return {done: true};\n\t    }\n\t}\n\n\tlet iter = new MyIterator();\n\n\t// output: {value: 'Ben'}\n\tconsole.log(iter.next());\n\n\t// output: {value: 'Ilegbodu'}\n\tconsole.log(iter.next());\n\n\t// output: {done: true}\n\tconsole.log(iter.next());\n\n\t// output: {done: true}\n\tconsole.log(iter.next());\n\n\tlet myIter2 = new MyIterator();\n\n\tfor (let item of myIter2) {\n\t    console.log(item);\n\t}\n\n\tlet fibonacci = {\n\t    [Symbol.iterator]() {\n\t        let previous = 0, current = 1;\n\t        return {\n\t            next() {\n\t                [previous, current] = [current, previous + current];\n\t                return {value: current};\n\t            }\n\t        }\n\t    }\n\t}\n\n\t// iterables with `for-of` loop\n\tfor (var number of fibonacci) {\n\t    // stop after the number is greater than 1000\n\t    if (number > 1000)\n\t        break;\n\n\t    console.log(number);\n\t}\n\n\t// iterables w/ destructuring\n\tlet [, secondFib, , fourthFib] = fibonacci;\n\n\t// output: 2, 5\n\tconsole.log(secondFib, fourthFib);\n\n\t// output: [1, 2, 3, 5, 8, 13]\n\tconsole.log(Array.from(take(fibonacci, 6)));\n}) ();\n"]}