{"version":3,"sources":["../es6/template-literals.js"],"names":[],"mappings":"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","file":"/Users/benmvp/github/benmvp/learning-es6/examples/transpiled-es5/template-literals-traceur.js","sourcesContent":["(function() {\n\t'use strict';\n\n\t{ // simple examples\n\t\tlet firstName = 'Ben',\n\t\t\tlastName = `Ilegbodu`;\n\n\t\t// Basic template literal is surrounding by\n\t\t// backticks so single/double quotes do need\n\t\t// to be escaped\n\t\t// output: He said, \"It's your fault!\"\n\t\tconsole.log(`He said, \"It's your fault!\"`);\n\n\t\t// Template literals support interpolation.\n\t\t// The values within `firstName` and `lastName`\n\t\t// are substituted into where the tokens are\n\t\t// output: Name: Ilegbodu, Ben\n\t\tconsole.log(`Name: ${lastName}, ${firstName}`);\n\n\t\t// Template literals support multi-line strings\n\t\t// output: This is\n\t\t// \t\tmulti-line text, so that\n\t\t//\t\tnewline characters are\n\t\t//\n\t\t//\n\t\t//\t\tnot needed. All whitespace\n\t\t//\t\t\tis respected, including tabs.\n\t\t//\n\t\t//\n\t\tconsole.log(`This is\n\t\t\tmulti-line text, so that\n\t\t\tnewline characters are\n\n\n\t\t\tnot needed. All whitespace\n\t\t\t\tis respected, including tabs.\n\n\t\t`);\n\t}\n\n\t{ // template literals are strings\n\t\tlet templateLiteral = `This is a literal`;\n\n\t\t// output: string\n\t\tconsole.log(typeof templateLiteral);\n\n\t\t// output: 17\n\t\tconsole.log(templateLiteral.length);\n\n\t\t// output: is a literal\n\t\tconsole.log(templateLiteral.substr(5));\n\n\t\t// output: a\n\t\tconsole.log(templateLiteral.charAt(8));\n\t}\n\n\t{\t// template literals using expression interpolation\n\t\tlet timeOfDay = (new Date).getHours(),\n\t\t\tmealCost = 7.99,\n\t\t\ttax = 0.09;\n\n\t\t// any sort of expression can go inside the\n\t\t// substitution token\n\t\t// output: Morning/Evening meal: $8.71\n\t\tconsole.log(`${timeOfDay < 12 ? 'Morning' : 'Evening'} meal: $${(mealCost * (1 + tax)).toFixed(2)}`);\n\n\t\tlet replacements = {\n\t\t\t\tfirstName: 'Ben',\n\t\t\t\tlastName: 'Ilegbodu'\n\t\t\t},\n\t\t\t{firstName, lastName} = replacements;\n\n\t\t// you have to destructure an object first in order\n\t\t// to use its key-values as substitution values\n\t\t// output: Name: Ilegbodu, Ben\n\t\tconsole.log(`Name: ${lastName}, ${firstName}`);\n\n\t\t// output: Name: ${lastName}, Ben\n\t\tconsole.log(`Name: \\${lastName}, ${firstName}`);\n\t}\n\n\t{ // multi-line template literals + interpolation\n\t\tlet eventCardInfo = {\n\t\t\t\ttitle: 'Nodevember 2015',\n\t\t\t\turl: 'http://nodevember.org/',\n\t\t\t\ttagline: 'Two days of Node and JavaScript',\n\t\t\t\ttags: ['JavaScript', 'Node']\n\t\t\t},\n\t\t\t{title, url, tagline, tags} = eventCardInfo,\n\t\t\thtml = `<section>\n\t\t\t\t\t\t<h3><a href=\"${url}\">${title}</a></h3>\n\t\t\t\t\t\t<p>${tagline}</p>\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t${\n\t\t\t\t\t\t\t\ttags.map(\n\t\t\t\t\t\t\t\t\ttag => `<li>${tag}</li>`\n\t\t\t\t\t\t\t\t).join('\\n')\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t</section>`;\n\n\t\t// The HML output isn't properly aligned, but that\n\t\t// doesn't really matter anymore\n\t\tconsole.log(html);\n\t}\n\n\t{ // tagged templates\n\t\tlet rawString = String.raw`\\t\\tThis is not a\\n multi-line string!`;\n\n\t\t// instead of tabs and new lines being in the string,\n\t\t// the actual escape characters are in the string\n\t\t// (effectively the backslash is escaped)\n\t\t// output: \"\\\\t\\\\tThis is not a\\\\n multi-line string!\"\n\t\tconsole.log(rawString);\n\n\t\tlet name = 'Ben',\n\n\t\t\t// no more double escaping and we can use\n\t\t\t// interpolation!\n\t\t\tnameRegExp = RegExp(String.raw`\\(${name}\\)`);\n\n\t\tconsole.log(nameRegExp.test('(Ben) Ilegbodu'));\n\n\t\tlet firstName = 'Ben',\n\t\t\tlastName = `Ilegbodu`,\n\t\t\tinterpolate = function(literals, ...substitutions) {\n\t\t\t\t// literals = ['Name: ', ', ', '']\n\t\t\t\t// substitutions = ['Ilegbodu', 'Ben']\n\t\t\t\t// substitutions.length == literals.length - 1\n\n\t\t\t    let interpolation = '';\n\n\t\t\t    // loop through based on length of substitutions\n\t\t\t    // since its shorter by 1\n\t\t\t    for (let i = 0; i < substitutions.length; i++) {\n\t\t\t        interpolation += literals[i] + substitutions[i];\n\t\t\t    }\n\n\t\t\t    // add the extra literal to the end\n\t\t\t    interpolation += literals[literals.length - 1];\n\n\t\t\t    return interpolation;\n\t\t\t};\n\n\t\t// instead of using the default interpolation\n\t\t// that ES6 offers, we're reimplementing it using\n\t\t// `interpolate` function\n\t\t// output: Name: Ilegbodu, Ben\n\t\tconsole.log(interpolate`Name: ${lastName}, ${firstName}`);\n\n\t\tlet\n\t\t\tStringraw = function(literals, ...substitutions) {\n\t\t\t\t// literals.raw is an array of raw strings\n\t\t\t    let rawLiterals = literals.raw,\n\t\t\t    \tinterpolation = '';\n\n\t\t\t    // loop through based on length of substitutions\n\t\t\t    // since its shorter by 1\n\t\t\t    for (let i = 0; i < substitutions.length; i++) {\n\t\t\t        interpolation += rawLiterals[i] + substitutions[i];\n\t\t\t    }\n\n\t\t\t    // add the extra raw literal to the end\n\t\t\t    interpolation += rawLiterals[rawLiterals.length - 1];\n\n\t\t\t    return interpolation;\n\n\t\t\t};\n\n\t\tconsole.log(Stringraw`\\t\\tThis ${1} is not a\\n multi-line string!`);\n\t}\n}) ();\n"]}