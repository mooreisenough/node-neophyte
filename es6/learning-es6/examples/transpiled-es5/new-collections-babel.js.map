{"version":3,"sources":["../es6/new-collections.js"],"names":[],"mappings":"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","file":"new-collections-babel.js","sourcesContent":["(function() {\n\t'use strict';\n\n\tclass Player {\n\t\tconstructor(name) {\n\t\t\tthis.name = name;\n\t\t}\n\t}\n\n    { // Map\n\t\tlet steph = new Player('Stephen Curry');\n\t\tlet kobe = new Player('Kobe Bryant');\n\t\tlet lebron = new Player('LeBron James');\n\t\tlet allStarVotes = new Map();\n\n\t\tallStarVotes.set(steph, 50)\n\t\t    .set(kobe, 0)\n\t\t    .set(lebron, 22);\n\n\t\t// make a clone of allstarVotes\n\t\tlet allStarVotesCopy = new Map(allStarVotes);\n\n\t\t// output: 50\n\t\tconsole.log(allStarVotes.get(steph));\n\n\t\t// output: false\n\t\tconsole.log(allStarVotes.has('Kevin Durant'));\n\n\t\tallStarVotes.delete(kobe);\n\n\t\t// output: 2\n\t\tconsole.log(allStarVotes.size);\n\n\t\tallStarVotes.clear();\n\n\t\t// output: 2\n\t\tconsole.log(allStarVotes.size);\n\n\t\t// log each player name since player\n\t\t// is a key in the map\n\t\tfor (let player of allStarVotesCopy.keys()) {\n\t\t    console.log(player.name);\n\t\t}\n\n\t\t// log each all star vote count since\n\t\t// count is a value in the map\n\t\tfor (let count of allStarVotesCopy.values()) {\n\t\t    console.log(count);\n\t\t}\n\n\t\t// log each player name and his votes count\n\t\t// Uses array destructuring to assign [key, value]\n\t\t// pair into separate variables'\n\t\tfor (let [player, count] of allStarVotesCopy.entries()) {\n\t\t    console.log(`${player.name} (${count})`);\n\t\t}\n\n\t\t// log each player name and his votes count\n\t\t// together. Ex: 'Stephen Curry (50)\n\t\t// Uses array destructuring to assign [key, value]\n\t\t// pair into separate variables\n\t\tfor (let [player, count] of allStarVotes) {\n\t\t    console.log(`${player.name} (${count})`);\n\t\t}\n\n\t\t// functional verion of calling `.entries()`\n\t\t// `map` is a reference to `allStarVotes`\n\t\tallStarVotesCopy.forEach((count, player, map) => {\n\t\t    console.log(`${player.name} (${count})`);\n\t\t\tconsole.log(map === allStarVotesCopy);\n\t\t});\n\n\t\tlet durant = new Player('Kevin Durant');\n\t\tlet cp3 = new Player('Chris Paul');\n\t\tlet theBrow = new Player('Anthony Davis');\n\n\t\tlet russell = new Player('Russell Westbrook');\n\t\tlet carmelo = new Player('Carmelo Anthony');\n\n\t\tlet moreAllStarVotes = new Map([\n\t\t    [durant, 20],\n\t\t    [cp3, 5],\n\t\t    [theBrow, 10]\n\t\t]);\n\t\tlet rawData = [\n\t\t    [russell, 12],\n\t\t    [carmelo, 15]\n\t\t];\n\n\t\tlet mergedMap = new Map([...allStarVotesCopy, ...moreAllStarVotes, ...rawData]);\n\n\t\tconsole.log(mergedMap);\n    }\n\n\t{ // WeakMap\n\t\tlet steph = new Player('Stephen Curry');\n\t\tlet kobe = new Player('Kobe Bryant');\n\t\tlet lebron = new Player('LeBron James');\n\t\tlet allStarVotesWeak = new WeakMap();\n\n\t\tallStarVotesWeak.set(steph, 50)\n\t\t    .set(kobe, 0)\n\t\t    .set(lebron, 22);\n\n\t\t// output: 50\n\t\tconsole.log(allStarVotesWeak.get(steph));\n\n\t\t// output: false\n\t\tconsole.log(allStarVotesWeak.has('Kevin Durant'));\n\n\t\tallStarVotesWeak.delete(kobe);\n\n\t\t// set up metadata click map\n\t\tlet clickMap = new WeakMap();\n\n\t\t// on each click, add the div to the map\n\t\t// (with initial click) or increment its\n\t\t// click count\n\t\t$('p').click(function() {\n\t\t    let pNode = this;\n\t\t    let clicks = clickMap.get(pNode);\n\n\t\t    if (!clicks) {\n\t\t        clicks = 0;\n\t\t    }\n\n\t\t    clicks.set(pNode, ++clicks);\n\t\t});\n\t}\n\n\t{ // Set\n\t\tfunction union(setA, setB) {\n\t\t\treturn new Set([...setA, ...setB]);\n\t\t}\n\t\tfunction intersection(setA, setB) {\n\t\t    return new Set([...setA].filter(item => setB.has(item)));\n\t\t}\n\n\t\tfunction difference(setA, setB) {\n\t\t    return new Set([...setA].filter(item => !setB.has(item)));\n\t\t}\n\n\t\tlet steph = new Player('Stephen Curry');\n\t\tlet kobe = new Player('Kobe Bryant');\n\t\tlet lebron = new Player('LeBron James');\n\n\t\tlet allStars = new Set();\n\n\t\tallStars.add(steph)\n\t\t    .add(kobe)\n\t\t    .add(steph) // duplicates are removed\n\t\t    .add(lebron);\n\n\t\t// create a clone by passing set as constructor of another\n\t\tlet allStarsClone = new Set(allStars);\n\n\t\t// output: false\n\t\tconsole.log(allStars.has('Kevin Durant'));\n\n\t\t// output: true\n\t\tconsole.log(allStars.has(kobe));\n\n\t\tallStars.delete(kobe);\n\n\t\t// output: 2\n\t\tconsole.log(allStars.size);\n\n\t\tallStars.clear();\n\n\t\t// output: 2\n\t\tconsole.log(allStars.size);\n\n\t\t// easily iterate over a set using `for-of`\n\t\tfor (let allStar in allStarsClone) {\n\t\t    console.log(allStar.name);\n\t\t}\n\n\t\t// can also iterate using `.forEach()`\n\t\tallStarsClone.forEach((value, key, setRef) => {\n\t\t    console.log(value.name);\n\n\t\t    // In a set the value & key are the same\n\t\t    console.log(value === key);\n\n\t\t    // The third parameter is a reference to the\n\t\t    // instance\n\t\t    console.log(setRef === allStarsClone);\n\t\t});\n\n\t\tlet setUnion = union(\n\t\t    new Set(['a', 'b', 'c', 'd']),\n\t\t    new Set(['d', 'e', 'f', 'g'])\n\t\t);\n\n\t\t// output: 8\n\t\tconsole.log(setUnion.size);\n\n\t\tlet setIntersection = intersection(\n\t\t    new Set(['a', 'b', 'c', 'd']),\n\t\t    new Set(['d', 'e', 'f', 'g'])\n\t\t);\n\n\t\t// output: 1\n\t\tconsole.log(setIntersection.size);\n\n\t\tlet setDifference = difference(\n\t\t    new Set(['a', 'b', 'c', 'd']),\n\t\t    new Set(['d', 'e', 'f', 'g'])\n\t\t);\n\n\t\t// output: 3\n\t\tconsole.log(setDifference.size);\n\t}\n}) ();\n"]}